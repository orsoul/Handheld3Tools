package com.fanfull.libjava.util;public class FomatUtil {  private static final int DECIMAL_LEN = 2;  public static final String DEFAULT_FORMAT = "%.2f%s";  enum Unit {    Auto("", 1), B("B", 1), KB("KB", 1024), MB("MB", 1048576), GB("GB", 1073741824), MS("ms", 1), S(        "s", 1000),    M("m", 6000), H("h", 360000), D("d", 8640000);    String name;    long value;    Unit(String name, long value) {      this.name = name;      this.value = value;    }  }  /**   * @param size 待转化的数字   * @param unit 目标单位   * @return 转化后的数值   */  public static double covert2Double(long size, Unit unit) {    return size / (double) unit.value;  }  /**   * @param size 待转化的数字   * @param unit 目标单位   * @param decimalLen 小数点后保留的位数   * @return 格式化后的字符串   */  public static String formatUnit(long size, Unit unit, int decimalLen) {    double dest = covert2Double(size, unit);    return String.format("%." + decimalLen + "f%s", dest, unit.name);  }  /**   * @param size 待转化的数字   * @param unit 目标单位   * @return 格式化后的字符串，小数点后保存2位   */  public static String formatUnit(long size, Unit unit) {    return formatUnit(size, unit, DECIMAL_LEN);  }  /**   * @param ms 待转化的毫秒数字   * @param unit 目标单位   * @param decimalLen 小数点后保留的位数   * @return 格式化后的字符串   */  public static String formatMillis(long ms, Unit unit, int decimalLen) {    if (unit == Unit.Auto) {      if (Unit.D.value <= ms) {        unit = Unit.D;      } else if (Unit.H.value <= ms) {        unit = Unit.H;      } else if (Unit.M.value <= ms) {        unit = Unit.M;      } else if (Unit.S.value <= ms) {        unit = Unit.S;      } else if (0 <= ms) {        unit = Unit.MS;      }    }    return formatUnit(ms, unit, decimalLen);  }  /**   * @param ms 待转化的毫秒数字   * @param unit 目标单位   * @return 格式化后的字符串，自动选择最接近的单位，小数点后保存2位   */  public static String formatMillis(long ms, Unit unit) {    return formatMillis(ms, unit, DECIMAL_LEN);  }  /**   * @param ms 待转化的毫秒数字   * @return 格式化后的字符串，小数点后保存2位   */  public static String formatMillis(long ms) {    return formatMillis(ms, Unit.Auto);  }  /**   * @param byteSize 待格式的字节数   * @param unit 目标单位   * @param decimalLen 小数点后保留的位数   * @return 格式化后的字符串，例：12.32MB   */  public static String formatFileSize(long byteSize, Unit unit, int decimalLen) {    if (unit == Unit.Auto) {      if (Unit.GB.value <= byteSize) {        unit = Unit.GB;      } else if (Unit.MB.value <= byteSize) {        unit = Unit.MB;      } else if (Unit.KB.value <= byteSize) {        unit = Unit.KB;      } else if (0 <= byteSize) {        unit = Unit.B;      }    }    return formatUnit(byteSize, unit, decimalLen);  }  /**   * @param byteSize 待格式的字节数   * @param unit 目标单位   * @return 格式化后的字符串，小数点后保存2位，例：12.32MB   */  public static String formatFileSize(long byteSize, Unit unit) {    return formatFileSize(byteSize, unit, DECIMAL_LEN);  }  /**   * @param byteSize 待格式的字节数   * @return 格式化后的字符串，自动选择最接近的单位，小数点后保存2位，例：12.32GB   */  public static String formatFileSize(long byteSize) {    return formatFileSize(byteSize, Unit.Auto);  }  /**   * @param digitsLen 保存小数点后 的位数.小于或等于0 只保留整数位   */  public static String toString(double d, int digitsLen) {    String s = Double.toString(d);    int i = s.indexOf('.');    if (0 < digitsLen) {      i = Math.min(i + 1 + digitsLen, s.length());    }    return s.substring(0, i);  }  public static void main(String[] args) {    Logs.out(toString(0.25, 10));  }  void test() {    System.out.println(formatFileSize(1L << 35, Unit.Auto));    System.out.println(formatFileSize(1L << 31, Unit.GB));    System.out.println(formatFileSize(1L << 31, Unit.MB));    System.out.println(formatFileSize(1L << 31, Unit.KB));    System.out.println(formatUnit(System.currentTimeMillis(), Unit.M));    System.out.println(String.format("%.3f%s", (1L << 31) / 1024D, "KB"));  }}