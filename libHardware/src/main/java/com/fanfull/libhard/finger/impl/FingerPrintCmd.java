package com.fanfull.libhard.finger.impl;

public abstract class FingerPrintCmd {
  public static final byte[] mFingerNumber = {
      (byte) 0xEF, 0x01, (byte) 0xFF,
      (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, 0x01, 0x00, 0x03, 0x1d,
      0x00, 0x21
  };// 获取当前已经存在的指纹数
  /** 获取指纹图像 PS_GetImage */
  public static final byte[] CMD_GET_IMAGE = {
      (byte) 0xEF, 0x01, (byte) 0xFF, (byte) 0xFF,
      (byte) 0xFF, (byte) 0xFF, 0x01, 0x00, 0x03, 0x01, 0x00, 0x05
  };
  public static final byte[] genchar = {
      (byte) 0xEF, 0x01, (byte) 0xFF, (byte) 0xFF,
      (byte) 0xFF, (byte) 0xFF, 0x01, 0x00, 0x04, 0x02, 0x01, 0x00, 0x08
  };// PS_GenChar
  public static final byte[] mRegFinger = {
      (byte) 0xEF, 0x01, (byte) 0xFF, (byte) 0xFF,
      (byte) 0xFF, (byte) 0xFF, 0x01, 0x00, 0x03, 0x05, 0x00, 0x09
  };// PS_RegModel
  public static final byte[] storechar = {
      (byte) 0xEF, 0x01, (byte) 0xFF, (byte) 0xFF,
      (byte) 0xFF, (byte) 0xFF, 0x01, 0x00, 0x06, 0x06, 0x01, 0x00, 0x01,
      0x00, 0x0F
  };// PS_StoreChar
  public static final byte[] loadchar = {
      (byte) 0xef, 0x01, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, 0x01,
      0x00, 0x06, 0x07, 0x01, 0x00, 0x00, 0x00, 0x0f
  };//PS_LoadChar
  public static final byte[] upchar = {
      (byte) 0xef, 0x01, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, 0x01,
      0x00, 0x04, 0x08, 0x01, 0x00, 0x0e
  };//PS_UpChar
  public static final byte[] mAddFinger = {
      (byte) 0xef, 0x01, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,
      0x01, 0x00, 0x03, 0x05, 0x00, 0x09
  };//PS_RegModel
  public static final byte[] search = {
      (byte) 0xEF, 0x01, (byte) 0xFF, (byte) 0xFF,
      (byte) 0xFF, (byte) 0xFF, 0x01, 0x00, 0x08, 0x04, 0x02, 0x00, 0x00,
      0x00, 0x10, 0x00, 0x1F
  };// PS_Search 搜索指纹库中的指纹
  public static final byte[] mReadindex = {
      (byte) 0xEF, 0x01, (byte) 0xFF, (byte) 0xFF,
      (byte) 0xFF, (byte) 0xFF, 0x01, 0x00, 0x04, 0x1F, 0x00, 0x00, 0x24
  };// PS_ReadIndexTable
  public static final byte[] mEmptyFinger = {
      (byte) 0xEF, 0x01, (byte) 0xFF,
      (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, 0x01, 0x00, 0x03, 0x0d,
      0x00, 0x11
  };// PS_Empty 删除所有指纹
  public static final byte[] writeText = {
      (byte) 0xEF, 0x01, (byte) 0xFF, (byte) 0xFF,
      (byte) 0xFF, (byte) 0xFF, 0x01, 0x00, 0x24, 0x18, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x3E
  };// PS_UpChar
  public static final byte[] readText = {
      (byte) 0xEF, 0x01, (byte) 0xFF, (byte) 0xFF,
      (byte) 0xFF, (byte) 0xFF, 0x01, 0x00, 0x04, 0x19, 0x00, 0x00, 0x1E
  };

  public static final int CMD_TYPE_GET_IMAGE = 0x07;

  /**
   * 包头[2byte] 芯片地址[4byte] 包标识[1byte] 包长度[2byte] 确认码[1byte] 校验和[2byte]
   * 包头  芯片地址 包标识   包长度   确认码  校验和
   * [2byte] [4byte] [1byte] [2byte] [1byte] [2byte]
   *
   * @param data 例：EF 01 FF FF FF FF 07 00 03 00 00 0A
   */
  public static boolean isFingerCmd(byte[] data) {
    return (data != null)
        && (11 <= data.length)
        && (data[0] == (byte) 0xEF)
        && (data[1] == 0x01);
  }

  public static boolean getImageSuccess(byte[] data) {
    if (!isFingerCmd(data)) {
      return false;
    }
    int cmdType = data[6] & 0xFF;
    return CMD_TYPE_GET_IMAGE == cmdType && data[9] == 0x00;
  }

  public static boolean handlerFingerCmd(byte[] data) {
    if (!isFingerCmd(data)) {
      return false;
    }

    int cmdType = data[6] & 0xFF;
    switch (cmdType) {
      case CMD_TYPE_GET_IMAGE:
        // EF 01 FF FF FF FF 07 00 03 00 00 0A
        //                确认码=00H 表示录入成功；
        //                确认码=01H 表示收包有错；
        //                确认码=02H 表示传感器上无手指；
        //                确认码=03H 表示录入不成功；
        if (data[9] == 0x00) {

        }
        break;
    }

    return false;
  }
}
