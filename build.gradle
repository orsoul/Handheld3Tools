// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: "dependencies.gradle"
buildscript {
  repositories {
    google()
    mavenCentral()
    jcenter()
  }
  dependencies {
    //noinspection GradleDependency
    classpath 'com.android.tools.build:gradle:4.2.1'

    // NOTE: Do not place your application dependencies here; they belong
    // in the individual module build.gradle files
  }
}

allprojects {
  repositories {
    google()
    mavenCentral()
    jcenter()
    maven { url 'https://jitpack.io' }
  }

  task myDemo(group: 'myTask') {
    if (project.name.startsWith('lib')) {
      //      project.properties.forEach()
      println "getVersion:" + project.getVersion()
    }
  }

  task assembleDebugLib(type: Copy, group: 'myTask', description: '构建lib项目，复制aar') {
    if (project.name.startsWith('lib')) {
      dependsOn 'assembleDebug'

      //      String destDir = "D:/!Desktop/${rootProject.name}-aar/"
      String destDir = rootDir.toString() + '/apk/'
      File srcFile = new File("build/outputs/aar/${project.name}-debug.aar")

      from srcFile
      into destDir
      /* 重命名方式1： 使用一个闭合映射文件名 */
      rename { String fileName ->
        fileName.replace('-debug', "D-${getStringTime()}")
      }

      /* 重命名方式2： 使用正则表达式映射文件名 */
      //            rename '(.+)-debug(.+)', '$1D-$2'

      //      String newName = "${project.name}D_" +
      //          "${getStringTime()}.aar"
      //      File destFile = new File(destDir, srcFile.name)
      //      File newNameFile = new File(destFile.parent, newName)
      //      def res = destFile.renameTo(newNameFile)
      //      println "${destFile} -> ${newNameFile} res:" + res
    }
  }
}

static String getStringTime() {
  return new Date().format("yyyy-MM-dd_HH_mm")
}

task clean(type: Delete) {
  delete rootProject.buildDir
}
